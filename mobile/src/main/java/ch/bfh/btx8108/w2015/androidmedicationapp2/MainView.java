package ch.bfh.btx8108.w2015.androidmedicationapp2;

import android.app.NotificationManager;
import android.content.Context;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.os.Bundle;
import android.support.design.widget.NavigationView;
import android.support.v4.app.NotificationCompat;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.view.MenuItem;
import android.view.View;
import android.widget.TextView;
import android.support.v4.app.NotificationCompat.WearableExtender;

import java.util.ArrayList;

import ch.bfh.btx8108.w2015.androidmedicationapp2.databaseController.MedicationData;
import ch.bfh.btx8108.w2015.androidmedicationapp2.databaseController.MedicationListData;
import ch.bfh.btx8108.w2015.androidmedicationapp2.databaseController.UserData;
import ch.bfh.btx8108.w2015.androidmedicationapp2.fragmentController.DailyDosette;
import ch.bfh.btx8108.w2015.androidmedicationapp2.fragmentController.DailyList;
import ch.bfh.btx8108.w2015.androidmedicationapp2.fragmentController.DailyTabs;
import ch.bfh.btx8108.w2015.androidmedicationapp2.fragmentController.Export;
import ch.bfh.btx8108.w2015.androidmedicationapp2.fragmentController.Medications;
import ch.bfh.btx8108.w2015.androidmedicationapp2.fragmentController.Settings;
import ch.bfh.btx8108.w2015.androidmedicationapp2.models.User;

/**
 * This java classes handles as a controller the starting view MainView
 *
 * @Created by johns2@bfh.ch on 05.11.2015
 */

public class MainView extends AppCompatActivity {
public static final int LOGGED_IN_USER_ID = 1;

    /**
     * This method is automatically generated by Android Studio and declares the actions while starting the app
     *
     * @param savedInstanceState Returns the saved instance state of the app
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        //MainView activity will be shown
        setContentView(R.layout.activity_main);

        //Create navigation drawer
        final DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);

        //Create navigation view
        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);

        //Create header view of navigation (drawer_header) and set username and mail address of the current user
        View headerView = navigationView.inflateHeaderView(R.layout.nav_header_main);
        TextView navigationUsername = (TextView)headerView.findViewById(R.id.nav_header_main_userName);
        navigationUsername.setText(this.getCurrentUserObject(this.getApplicationContext()).getUsername());
        TextView navigationMailAddress = (TextView)headerView.findViewById(R.id.nav_header_main_mailAddress);
        navigationMailAddress.setText(this.getCurrentUserObject(this.getApplicationContext()).geteMailAddress());

        //Initialize the fragment manager and set view showed up while starting the application (daily tabs)
        final FragmentManager fragmentManager;
        fragmentManager = getSupportFragmentManager();
        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
        fragmentTransaction.replace(R.id.containerView, new DailyTabs()).commit();

        //Declare a listener
        navigationView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {
            @Override
            public boolean onNavigationItemSelected(MenuItem menuItem) {
                drawer.closeDrawers();

                int id = menuItem.getItemId();

                if (id == R.id.nav_medicationPlan) {
                    // Call the method which opens the sliding tabs fragment
                    FragmentTransaction fragmentTransaction =
                            fragmentManager.beginTransaction();
                    fragmentTransaction.replace(R.id.containerView, new DailyTabs()).commit();
                } else if (id == R.id.nav_medicaments) {
                    // Call the method which opens the medications fragment
                    openMedicationsFragment(fragmentManager);
                } else if (id == R.id.nav_export) {
                    // Show the export feature
                    FragmentTransaction fragmentTransaction =
                            fragmentManager.beginTransaction();
                    fragmentTransaction.replace(R.id.containerView, new Export()).commit();
                } else if (id == R.id.nav_settings) {
                    // Call the method which opens the settings fragment
                    openSettingsFragment(fragmentManager);
                }
                return false;
            }
        });

        /**
         * Setup Drawer Toggle of the Toolbar
         */

        android.support.v7.widget.Toolbar toolbar = (android.support.v7.widget.Toolbar) findViewById(R.id.toolbar);
        ActionBarDrawerToggle mDrawerToggle = new ActionBarDrawerToggle(this,drawer, toolbar,R.string.app_name,
                R.string.app_name);

        drawer.setDrawerListener(mDrawerToggle);

        mDrawerToggle.syncState();
    }

    public DailyDosette openDailyDosette(){
        // Handle the daily tabs
        DailyDosette newDailyDosette = new DailyDosette();
        Bundle dataBundle = new Bundle();
        double[] dailyDosetteNumbers = this.getCurrentDosette(newDailyDosette.getContext());
        dataBundle.putDoubleArray("DOSETTENUMBERS", dailyDosetteNumbers);

        newDailyDosette.setArguments(dataBundle);

        return newDailyDosette;
    }

    public DailyList openDailyPlan(){
        //Initialize a new daily list fragment
        DailyList newDailyList = new DailyList();

        /*Initalize a bundle which will contain a parcelable array list with the medication plan
        data which are provided by the method
         */
        Bundle dataBundle = new Bundle();
        ArrayList medicationPlan = this.getCurrentMedicationPlan(newDailyList.getContext());
        dataBundle.putParcelableArrayList("MEDICATIONPLAN", medicationPlan);

        //Send the daily list fragment the created bundle as an argument
        newDailyList.setArguments(dataBundle);

        return newDailyList;
    }

    //This method calls the user related data of a medication list and returns the objects in an array list
    public ArrayList getCurrentMedicationPlan(Context fragmentContext){
        MedicationListData currentMedicationList = new MedicationListData(fragmentContext, LOGGED_IN_USER_ID);
        return currentMedicationList.getMedicationPlanList();
    }

    public double[] getCurrentDosette(Context fragmentContext){
        MedicationListData currentDosette = new MedicationListData(fragmentContext, LOGGED_IN_USER_ID);
        return currentDosette.getCurrentDosette();
    }

    public void openMedicationsFragment(FragmentManager fragmentManager){
        // Handle the medications fragment
        Medications newMedicationsFragment = new Medications();
        newMedicationsFragment.initMedicationsList(this.getMedicationsList(newMedicationsFragment.getContext()));
        FragmentTransaction fragmentTransaction =
                fragmentManager.beginTransaction();
        fragmentTransaction.replace(R.id.containerView, newMedicationsFragment).commit();
    }

    public void openAddMedicationsFragment(FragmentManager fragmentManager){
        // Handle the medications fragment
        Medications newMedicationsFragment = new Medications();
        newMedicationsFragment.initMedicationsList(this.getMedicationsList(newMedicationsFragment.getContext()));
        FragmentTransaction fragmentTransaction =
                fragmentManager.beginTransaction();
        fragmentTransaction.replace(R.id.containerView, newMedicationsFragment).commit();
    }

    public void openSettingsFragment(FragmentManager fragmentManager){
        // Handle the settings fragment
        Bundle dataBundle = new Bundle();
        Settings newSettingsFragment = new Settings();
        newSettingsFragment.setArguments(dataBundle);

        User currentUser = this.getCurrentUserObject(newSettingsFragment.getContext());
        dataBundle.putParcelable("USERDATA", currentUser);

        FragmentTransaction fragmentTransaction =
                fragmentManager.beginTransaction();
        fragmentTransaction.replace(R.id.containerView, newSettingsFragment).commit();
    }

    public ArrayList getMedicationsList(Context fragmentContext){
        MedicationData medicationsList = new MedicationData(fragmentContext, LOGGED_IN_USER_ID);
        return medicationsList.getMedicationsListByAttribute("LongNameGerman");
    }

    public User getCurrentUserObject(Context fragmentContext){
        UserData UserList = new UserData(fragmentContext);
        return UserList.getUserObjects().get(LOGGED_IN_USER_ID);
    }

    public void updateCurrentUserObject(Context fragmentContext, User currentUser){
        UserData UserList = new UserData(fragmentContext);
        UserList.updateUser(currentUser.getUser_id(), currentUser.getUsername(), currentUser.getFirstname(),
                currentUser.getLastname(), currentUser.geteMailAddress(), currentUser.getMute(),
                currentUser.getNotificationSound(), currentUser.getNotificationVibration());
    }

    //This method triggers an synchronous android notification on a smartphone AND smartwatch
    public void notifyMe(View view){
        //Initialize a NotificationManager object
        NotificationManager notificationManager = null;
        NotificationCompat.Builder builder = new NotificationCompat.Builder(this);

        //Define context of the notification (text and logo)
        builder.setContentTitle("MedMinder");
        builder.setContentText("Bitte beachten Sie Ihr heutiges Dosett");
        builder.setSmallIcon(R.mipmap.medmind_logo_48x);
        builder.setTicker("Update von MedMinder");

        //Define, that a notification on the conntected smartwatch should be triggered
        builder.extend(new WearableExtender());

        //Send the defined notification to the initialized NotificationManager object
        notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
        notificationManager.notify(1, builder.build());
    }

    @Override
    public void onBackPressed() {
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START);
        } else {
            super.onBackPressed();
        }
    }
}
